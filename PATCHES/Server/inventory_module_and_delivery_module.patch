Index: src/main/java/ar/com/adriabe/daos/ProductDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ar/com/adriabe/daos/ProductDao.java	(revision 268)
+++ src/main/java/ar/com/adriabe/daos/ProductDao.java	(revision )
@@ -18,7 +18,7 @@
 
     Product findProductByFabricAndColorAndStripeAndCombination(Fabric fabric, Color color, Stripe stripe, StripeCombination stripeCombination);
 
-    Product findProductByFabricAndColorAndStripeAndCombinationIds(Long fabric, Long color, Long stripe, Long stripeCombination);
+    Product findProductByFabricAndColorAndStripeAndCombinationIds(Long fabric, Long color, Long stripe, Long stripeCombination) throws DaoException;
 
     void delete(Product product);
 
Index: src/main/webapp/WEB-INF/pages/product/list-product.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/webapp/WEB-INF/pages/product/list-product.jsp	(revision 268)
+++ src/main/webapp/WEB-INF/pages/product/list-product.jsp	(revision )
@@ -63,17 +63,18 @@
                                             aria-hidden="true">&times;</button>
                                     <h4 class="modal-title" id="edit-stock-modal-label">Editar Stock</h4>
                                 </div>
-                                <div class="modal-body" style="height:320px;">
+                                <div class="modal-body">
                                     <div class="first-column">
                                         <div class="form-group">
                                             <label>Barcode*</label>
                                             <input type="text" id="barcode" class="form-control"
                                                    placeholder="barcode"/>
+
                                             <p class="help-block">Código de barras.</p>
                                         </div>
                                     </div>
                                     <div class="second-column">
-                                    <div class="form-group">
+                                        <div class="form-group">
                                             <label>Cantidad*</label>
                                             <input type="text" id="amount" class="form-control"
                                                    placeholder=""/>
@@ -100,8 +101,8 @@
             </div>
             <!-- /.panel -->
             <!-- /.table-responsive -->
-            </div>
-            <!-- /.panel-body -->
+        </div>
+        <!-- /.panel-body -->
         </div>
         <!-- /.panel -->
     </tiles:putAttribute>
\ No newline at end of file
Index: src/main/java/ar/com/adriabe/web/model/json/ProductJSON.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ar/com/adriabe/web/model/json/ProductJSON.java	(revision 268)
+++ src/main/java/ar/com/adriabe/web/model/json/ProductJSON.java	(revision )
@@ -40,6 +40,7 @@
     private Long productFamilyId;
 
     private int stripeCombinationIndex;
+    private boolean tiras;
 
 
     public long getId() {
@@ -237,5 +238,13 @@
 
     public void setStripeCombinationId(Long stripeCombinationId) {
         this.stripeCombinationId = stripeCombinationId;
+    }
+
+    public boolean isTiras() {
+        return tiras;
+    }
+
+    public void setTiras(boolean tiras) {
+        this.tiras = tiras;
     }
 }
Index: src/main/java/ar/com/adriabe/services/impl/ProductServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ar/com/adriabe/services/impl/ProductServiceImpl.java	(revision 268)
+++ src/main/java/ar/com/adriabe/services/impl/ProductServiceImpl.java	(revision )
@@ -168,8 +168,11 @@
         }
         //lookup for the product
         logger.debug("Busca un producto por: tejido, color, patrón y combinación de rayado. Si no lo encuentra lo crea.");
+        try {
-        product = productDao.findProductByFabricAndColorAndStripeAndCombinationIds(fabric, colorId, stripe, stripeCombination);
+            product = productDao.findProductByFabricAndColorAndStripeAndCombinationIds(fabric, colorId, stripe, stripeCombination);
-        if (product == null) {
+
+        } catch (DaoException e) {
+            e.printStackTrace();
             List<ProductFamily> productFamilies = findProductFamilyByFabricAndStripe(fabric, stripe);
             Fabric fab = findFabricById(fabric);
             Stripe stripePattern = findStripeById(stripe);
@@ -177,6 +180,17 @@
                 String aux = ((fab == null) ? "" : fab.getShortname()) + " " + ((stripePattern == null) ? "" : stripePattern.getName());
                 throw new ServiceException("Tipo de producto fuera de la lista de precios " + aux);
             }
+
+            product = createProduct(colorId, stripe, stripeCombination, productFamilies, fab, stripePattern);
+        }
+
+        return product;
+    }
+
+    protected Product createProduct(Long colorId, Long stripe, Long stripeCombination, List<ProductFamily> productFamilies, Fabric fab, Stripe stripePattern) throws ServiceException {
+        try {
+
+            Product product;
             product = new Product();
             product.setStripeCombination(findStripeCombinationById(stripeCombination));
             product.setStripe(stripePattern);
@@ -192,8 +206,11 @@
                 }
             }
             productDao.save(product);
-        }
-        return product;
+            return product;
+        } catch (Exception ex) {
+            String aux = ((fab == null) ? "" : fab.getShortname()) + " " + ((stripePattern == null) ? "" : stripePattern.getName());
+            throw new ServiceException("Error al registrar producto " + aux);
+        }
     }
 
     @Override
Index: src/main/java/ar/com/adriabe/web/controllers/adapters/ProductJSONAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ar/com/adriabe/web/controllers/adapters/ProductJSONAdapter.java	(revision 268)
+++ src/main/java/ar/com/adriabe/web/controllers/adapters/ProductJSONAdapter.java	(revision )
@@ -36,6 +36,7 @@
         result.setColorCoordinate(product.getColor().getCoordinate());
         result.setColorType(product.getColorTypeLabel());
         result.setCuello(product.getFabric().isCuello());
+        result.setTiras(product.getFabric().isTira());
         result.setFabric(product.getFabricName());
         result.setFabricId(product.getFabric().getId());
         result.setFabricCode(product.getFabric().getCode());
Index: src/main/java/ar/com/adriabe/components/InventoryAccountantImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ar/com/adriabe/components/InventoryAccountantImpl.java	(revision )
+++ src/main/java/ar/com/adriabe/components/InventoryAccountantImpl.java	(revision )
@@ -0,0 +1,50 @@
+package ar.com.adriabe.components;
+
+
+import ar.com.adriabe.daos.ProductDao;
+import ar.com.adriabe.model.Barcode;
+import ar.com.adriabe.model.Product;
+import ar.com.adriabe.services.InvalidDataException;
+import ar.com.adriabe.services.ServiceException;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Qualifier;
+import org.springframework.stereotype.Component;
+
+@Component
+public class InventoryAccountantImpl implements InventoryAccountant {
+
+    public static final String INVALID_BARCODE = "Error en la lectura del c?digo de barras.";
+    public static final String PRODUCT_NOT_FOUND = "Producto no encontrado.";
+    protected final Logger logger = LogManager.getLogger(InventoryAccountantImpl.class);
+    BarcodeAnalyzer barcodeAnalizer;
+    ProductDao productDao;
+
+    @Autowired
+    public InventoryAccountantImpl(@Qualifier("barcodeAnalyzer") BarcodeAnalyzer barcodeAnalizer, ProductDao productDao) {
+        this.barcodeAnalizer = barcodeAnalizer;
+        this.productDao = productDao;
+    }
+
+    @Override
+    public Barcode incrementProductStock(String code, long amount) throws ServiceException {
+        Barcode barcode = null;
+        try {
+            barcode = barcodeAnalizer.scanBarcode(code);
+            Product product = barcode.getProduct();
+            product.addStock(amount);
+            productDao.save(product);
+            return barcode;
+        } catch (InvalidDataException e) {
+            e.printStackTrace();
+            logger.error("C?digo de barras invalido");
+            throw new ServiceException(INVALID_BARCODE);
+        } catch (ServiceException e) {
+            e.printStackTrace();
+            logger.error("Producto no encontrado.");
+            throw new ServiceException(PRODUCT_NOT_FOUND);
+        }
+    }
+
+}
Index: src/main/java/ar/com/adriabe/daos/impl/ProductDaoImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ar/com/adriabe/daos/impl/ProductDaoImpl.java	(revision 268)
+++ src/main/java/ar/com/adriabe/daos/impl/ProductDaoImpl.java	(revision )
@@ -1,5 +1,6 @@
 package ar.com.adriabe.daos.impl;
 
+import ar.com.adriabe.daos.DaoException;
 import ar.com.adriabe.daos.ProductDao;
 import ar.com.adriabe.model.*;
 import ar.com.adriabe.repositories.ProductRepository;
@@ -48,11 +49,17 @@
 
 
     @Override
-    public Product findProductByFabricAndColorAndStripeAndCombinationIds(Long fabric, Long color, Long stripe, Long stripeCombination) {
+    public Product findProductByFabricAndColorAndStripeAndCombinationIds(Long fabric, Long color, Long stripe, Long stripeCombination) throws DaoException {
+        Product product = null;
         if (stripe == null || stripeCombination == null || stripe == 0 || stripeCombination == 0) {
-            return productRepository.findByFabricAndColor(fabric, color);
+            product = productRepository.findByFabricAndColor(fabric, color);
+        } else {
+            product = productRepository.findByFabricAndColorAndStripeAndStripeCombination(fabric, color, stripe, stripeCombination);
         }
-        return productRepository.findByFabricAndColorAndStripeAndStripeCombination(fabric, color, stripe, stripeCombination);
+        if (product == null) {
+            throw new DaoException("Producto no encontrado");
+        }
+        return product;
     }
 
     @Override
Index: src/main/java/ar/com/adriabe/components/InventoryAccountant.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ar/com/adriabe/components/InventoryAccountant.java	(revision )
+++ src/main/java/ar/com/adriabe/components/InventoryAccountant.java	(revision )
@@ -0,0 +1,12 @@
+package ar.com.adriabe.components;
+
+
+import ar.com.adriabe.model.Barcode;
+import ar.com.adriabe.services.ServiceException;
+
+public interface InventoryAccountant {
+
+    public Barcode incrementProductStock(String code, long amount) throws ServiceException;
+
+
+}
Index: src/main/java/ar/com/adriabe/web/controllers/services/ProductServiceController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ar/com/adriabe/web/controllers/services/ProductServiceController.java	(revision 268)
+++ src/main/java/ar/com/adriabe/web/controllers/services/ProductServiceController.java	(revision )
@@ -1,6 +1,6 @@
 package ar.com.adriabe.web.controllers.services;
 
-import ar.com.adriabe.components.BarcodeAnalyzer;
+import ar.com.adriabe.components.InventoryAccountant;
 import ar.com.adriabe.model.*;
 import ar.com.adriabe.services.ColorService;
 import ar.com.adriabe.services.PricingService;
@@ -43,8 +43,8 @@
     PricingService pricingService;
 
     @Autowired
-    @Qualifier("barcodeAnalyzer")
-    BarcodeAnalyzer barcodeAnalizer;
+    @Qualifier("inventoryAccountantImpl")
+    InventoryAccountant inventoryAccountant;
 
 
     @RequestMapping(value = "/data/products", method = RequestMethod.GET)
@@ -136,16 +136,15 @@
     }
 
 
-    @RequestMapping(value = "/data/update/stock", method = RequestMethod.POST)
+    @RequestMapping(value = "/data/product/adjust", method = RequestMethod.POST)
     public
     @ResponseBody
     WebPageResponse updateProductStock(@RequestParam("barcode") String code,
-                                                 @RequestParam("amount") int amount) {
+                                       @RequestParam("amount") int amount) {
         WebPageResponse webPageResponse = new WebPageResponse();
         try {
             logger.info("Adds to the given barcode the given amount");
-            Barcode barcode = barcodeAnalizer.scanBarcode(code);
-
+            Barcode barcode = inventoryAccountant.incrementProductStock(code, amount);
             Map<String, String> map = new HashMap<String, String>();
             map.put("barcode", barcode.getCode());
             webPageResponse.setAjaxResponse(map);
Index: src/main/java/ar/com/adriabe/web/controllers/services/DeliverySynchronizer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ar/com/adriabe/web/controllers/services/DeliverySynchronizer.java	(revision 268)
+++ src/main/java/ar/com/adriabe/web/controllers/services/DeliverySynchronizer.java	(revision )
@@ -6,16 +6,12 @@
 import ar.com.adriabe.services.DeliveryOrderService;
 import ar.com.adriabe.services.OrderService;
 import ar.com.adriabe.web.controllers.adapters.DeliveryOrderJSONAdapter;
-import ar.com.adriabe.web.model.json.DeliveryOrderItemJSON;
 import ar.com.adriabe.web.model.json.DeliveryOrderJSON;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Controller;
-import org.springframework.validation.BindingResult;
-import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.ResponseBody;
-import org.springframework.web.bind.support.SessionStatus;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -24,7 +20,7 @@
  * Created by ajmild1 on 11/08/2015.
  */
 @Controller
-public class DeliverySynchronizer  {
+public class DeliverySynchronizer {
 
     private OrderService orderService;
 
@@ -40,13 +36,12 @@
     }
 
 
-    @RequestMapping(value = "/synch/delivery", method = RequestMethod.POST, consumes = "application/json")
+    @RequestMapping(value = "/synch/delivery", method = RequestMethod.GET, consumes = "application/json")
     public
     @ResponseBody
-    List<DeliveryOrderJSON> synchronizeDeliveryApp(@RequestBody ArrayList<DeliveryOrderItemJSON> json, BindingResult binding, SessionStatus status) {
-
+    List<DeliveryOrderJSON> synchronizeDeliveryApp() {//(@RequestBody(required = false) ArrayList<DeliveryOrderItemJSON> json, BindingResult binding, SessionStatus status) {
         try {
-            List<OrderItemDetail> delivered = adapter.convertDeliveryOrderItemsJSONListToOrderItemDetailsList(json);
+            List<OrderItemDetail> delivered = adapter.convertDeliveryOrderItemsJSONListToOrderItemDetailsList(null);
             deliveryOrderService.updateDeliveredItemsStatus(delivered);
             List<DeliveryOrder> list = orderService.findAllDeliveryOrders();
             return adapter.convertDeliveryOrderListToDeliveryOrderJSONList(list);
Index: src/test/java/ar/com/adriabe/components/InventoryAccountantImpl_UT.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ar/com/adriabe/components/InventoryAccountantImpl_UT.java	(revision )
+++ src/test/java/ar/com/adriabe/components/InventoryAccountantImpl_UT.java	(revision )
@@ -0,0 +1,85 @@
+package ar.com.adriabe.components;
+
+import ar.com.adriabe.daos.ProductDao;
+import ar.com.adriabe.model.Barcode;
+import ar.com.adriabe.model.Product;
+import ar.com.adriabe.services.InvalidDataException;
+import ar.com.adriabe.services.ServiceException;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.runners.MockitoJUnitRunner;
+
+import static org.fest.assertions.Assertions.assertThat;
+import static org.fest.assertions.Fail.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.mockito.Mockito.when;
+
+@RunWith(MockitoJUnitRunner.class)
+public class InventoryAccountantImpl_UT {
+
+    public static final long DUMMY_AMOUNT = 10l;
+    public static final String DUMMY_BARCODE = "DUMMY_BARCODE";
+    public static final long DUMMY_PRODUCT_ID = 10l;
+    public static final int DUMMY_INITIAL_STOCK = 0;
+    public static final double DUMMY_WEIGHT = 20.2;
+    InventoryAccountant inventoryAccountant;
+
+    @Mock
+    private ProductDao productDao;
+
+    @Mock
+    private BarcodeAnalyzer barcodeAnalizer;
+
+    @Before
+    public void setUp() throws Exception {
+        inventoryAccountant = new InventoryAccountantImpl(barcodeAnalizer, productDao);
+    }
+
+    @Test
+    public void productStockIncreasesWhenIncrementProductStockIsExecuted() throws Exception {
+        //Given
+        Product dummyProduct = new Product(DUMMY_PRODUCT_ID);
+        dummyProduct.setStock(DUMMY_INITIAL_STOCK);
+        Barcode expectedBarcode = new Barcode(dummyProduct, DUMMY_BARCODE, DUMMY_WEIGHT);
+        when(barcodeAnalizer.scanBarcode(DUMMY_BARCODE)).thenReturn(expectedBarcode);
+
+        //When
+        Barcode barcode = inventoryAccountant.incrementProductStock(DUMMY_BARCODE, DUMMY_AMOUNT);
+        //Should
+        assertNotNull(barcode);
+        assertEquals(barcode.getProduct(), dummyProduct);
+        assertEquals(barcode.getProduct().getStock(), DUMMY_INITIAL_STOCK + DUMMY_AMOUNT);
+    }
+
+
+    @Test
+    public void productNotFoundMessageIsThrownWhenProductBarcodeCouldNotBeFound() throws Exception {
+        //Given
+        Product dummyProduct = new Product(DUMMY_PRODUCT_ID);
+        dummyProduct.setStock(DUMMY_INITIAL_STOCK);
+
+        when(barcodeAnalizer.scanBarcode(DUMMY_BARCODE)).thenThrow(new InvalidDataException(), new ServiceException(""));
+
+        //When
+        try {
+            Barcode barcode = inventoryAccountant.incrementProductStock(DUMMY_BARCODE, DUMMY_AMOUNT);
+            fail("Should have failed");
+        } catch (ServiceException e) {
+            assertThat(e).hasMessage(InventoryAccountantImpl.INVALID_BARCODE);
+        }
+        try {
+            Barcode barcode = inventoryAccountant.incrementProductStock(DUMMY_BARCODE, DUMMY_AMOUNT);
+            fail("Should have failed");
+        } catch (ServiceException e) {
+            assertThat(e).hasMessage(InventoryAccountantImpl.PRODUCT_NOT_FOUND);
+        }
+
+        //Should
+        assertEquals(dummyProduct.getStock(), DUMMY_INITIAL_STOCK);
+    }
+
+
+}
